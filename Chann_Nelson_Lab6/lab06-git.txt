Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    ```
	Jonathon Chann
	Thomas Nelson

    ```


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    ```
	Brings up the manual for git commands. Includes things such as clone, init, add, mv, reset.

    ```

2.  What does `-ag` cause `git help` to do?

    ```

	Lists all of the availible commands when using git.

    ```

G. Basic commands
-----------------

Open the terminal. Navigate to your team‚Äôs repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit -m "Add our names."ù
    git log

1.  What kind of information does `git status` report?

    ```
	Lists changes to be committed and untracked files. 

    ```

2.  What does `git add names.txt` do?

    ```
	The command tracks name.txt, and stages the file for the next commit.

    ```

3.  What does `git commit -m "Add our names."` do?

    ```
	Commits the staged files and adds a message.

    ```

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    ```
	The command adds all of new files to the stage. The "." means all new files in folder. 

    ```

5.  What does `git commit` (without -m) do?

    ```
	The command commits all files on the stage and brings up VIM for extensive comment.

    ```

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    ```
	git commit

    ```

7.  What does `git log do`?

    ```

	Documents all commits and displays comments for each one.

    ```


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    ```
	names.txt

    ```

    **Unstaged**

    ```
	movies.txt

    ```

    **Untracked**

    ```
	foods.txt

    ```

1.  If you run `git commit` what changes will be committed (***DON‚ÄôT DO IT***)?

    ```
	names.txt

    ```

2.  What command do you run to stage changes?

    ```

	git add

    ```

3.  What command do you run to unstage changes?

    ```
	git reset HEAD <file>

    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```

	It displays the differences in the unstaged files.

    ```

2.  What does `git diff --cached` display?

    ```
	It displays the differences in the staged files to the repository.

    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```
	git reset HEAD names.txt
	git add movies.txt

    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```

	There is a staged and unstaged version of movies.txt, this is because the stage is stand alone from the unstaged files.

    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```

	In the changes not staged, names.txt is listed as deleted. This shows that the file has been deleted and if comitted will delete the file in the repo. 

    ```
6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```
	It shows movies.txt beening deleted because there is now no file named movies.txt and the new file last-movies.txt is an untracked file.

    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```
	git add last-movies.txt
	git add foods.txt
	git commit -m "Step 7 commit." 

    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```
	It holds the files that are added and will be contained in the next commit. 

    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    ```
	It adds a degree of seperation between the entire repo and your working directory. It also allows for the user to determine what they have changes they have made to the project before comitting it to the repo. 

    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    ```
	This is a reverse commit. It undos the last commit, putting the most recent files in the stage and removing them from the repo.


    ```

Run the following commands:

    git commit -m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```
	This reverses the previous commit. It also changes the files in your working directory the same as your most recent commit.

    ```

2.  What is the difference between `--hard` and `--soft`?

    ```
	--hard undos the previous commit and changes your working directory to the reversed commit, while the --soft, undos the commit but does not change the directory files.

    ```

3.  What do you think `HEAD` means?

    ```
	HEAD indicates the most recent commit in the repository. Usually the head will be the most recent commit, but it can be changed to refer to older commits.

    ```

4.  What do you think `HEAD^` means?

    ```
	I think that "HEAD^" indicates that the head location will change based on the most recent reset. 
    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
